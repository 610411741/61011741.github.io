{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://github.com/610411741/61011741.github.io","root":"/61011741.github.io/"},"pages":[],"posts":[{"title":"嗨 blog","slug":"title","date":"2021-07-10T10:16:11.000Z","updated":"2022-08-29T13:44:10.147Z","comments":true,"path":"2021/07/10/title/","link":"","permalink":"https://github.com/610411741/61011741.github.io/2021/07/10/title/","excerpt":"","text":"HELLO！ blog我的第一个blog","categories":[],"tags":[]},{"title":"简单聊一聊Spring/SpringBuilder/SpringBuffer","slug":"blog1","date":"2020-07-15T07:35:42.000Z","updated":"2022-09-07T08:31:32.093Z","comments":true,"path":"2020/07/15/blog1/","link":"","permalink":"https://github.com/610411741/61011741.github.io/2020/07/15/blog1/","excerpt":"","text":"1.11.String 是不可变字符串，每对Spring进行编写后都会产生一个新的字符串对象。2.StringBuffer StringBuilder都是可变的字符串3.StringBuffer StringBuilder在功能以及用法上基本等价。但是StringBuffer中很多办法都用了Synchronized关键字进行修饰，所以线程比较安全，而StringBuilder中并没有用其修饰，所以它不安全，但是在单线程下，它不用每次判断锁，因此效率较高。 1.2String 对象不是一旦创建了就不改变了吗 ？ 那它常用的修改方法的值是怎么样实现的呢？拥有方法如下： substring(int,int) 字符串截取、split(String,int) 字符串分割、toLowerCase() 字符串所有字母小写。通过查看subString底层的源码可知：其实是重新new了一个新的对象来接受字符串，并不是重新修改了原来的值，所以本质上原来的String对象并没有发生改变 1234567891011121314public String substring(int beginIndex, int endIndex) &#123; if (beginIndex &lt; 0) &#123; throw new StringIndexOutOfBoundsException(beginIndex); &#125; if (endIndex &gt; value.length) &#123; throw new StringIndexOutOfBoundsException(endIndex); &#125; int subLen = endIndex - beginIndex; if (subLen &lt; 0) &#123; throw new StringIndexOutOfBoundsException(subLen); &#125; return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this : new String(value, beginIndex, subLen);&#125; 1.3StringBulider为什么又可变了呢？其实可以把他看作一个容器。Stringbulid 和String可以相互转换。String -&gt; StringBuilder:可以使用StringBuilder的构造方法 StringBuilder(String str)构造一个字符串生成器，并初始化为指定的字符串内容。 StringBuilder -&gt; String:可以使用StringBuilder中的toString方法 public String toString():将当前StringBuilder对象转换为String对象。Demo: 1234567891011public static void main(String[] args) &#123; //String -&gt; StringBuilder String str = &quot;Hello&quot;; System.out.println(str); StringBuilder stringBuilder = new StringBuilder(str); stringBuilder.append(&quot;World&quot;); System.out.println(stringBuilder); //StringBuilder -&gt; String String string = stringBuilder.toString(); System.out.println(string); &#125; 1.4StringBuffer StringBulider一样同其实也可以被看作一个容器。字符串类可变，StringBuffer 可以通过 toString()方法转换成 StringString 可以通过 StringBuffer 的构造方法，转换成 StringBuffer。 12String string = new StringBuffer().toString();StringBuffer stringBuffer = new StringBuffer(new String());","categories":[],"tags":[],"author":"Tian Lin"}],"categories":[],"tags":[]}